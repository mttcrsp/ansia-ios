///
/// @Generated by Mockolo
///

import Foundation
import GRDB
import UserNotifications

public class PersistenceServiceWriteMock: PersistenceServiceWrite {
  public init() {}

  public private(set) var performCallCount = 0
  public var performHandler: ((Database) throws -> Void)?
  public func perform(in database: Database) throws {
    performCallCount += 1
    if let performHandler {
      try performHandler(database)
    }
  }
}

public class FileManagerProtocolMock: FileManagerProtocol {
  public init() {}

  public private(set) var containerURLCallCount = 0
  public var containerURLHandler: ((String) -> (URL?))?
  public func containerURL(forSecurityApplicationGroupIdentifier groupIdentifier: String) -> URL? {
    containerURLCallCount += 1
    if let containerURLHandler {
      return containerURLHandler(groupIdentifier)
    }
    return nil
  }
}

public class NetworkServiceMock: NetworkService {
  public init() {}

  public private(set) var performCallCount = 0
  public var performHandler: ((Any) async throws -> (Any))?
  public func perform<Request>(_ request: Request) async throws -> Request.Response where Request: NetworkRequest {
    performCallCount += 1
    if let performHandler {
      return try await performHandler(request) as! Request.Response
    }
    fatalError("performHandler returns can't have a default value thus its handler must be set")
  }
}

public class TimerProtocolMock: TimerProtocol {
  public init() {}

  public private(set) static var scheduledTimerCallCount = 0
  public static var scheduledTimerHandler: ((TimeInterval, Bool, @escaping (TimerProtocol) -> Void) -> (TimerProtocol))?
  public static func scheduledTimer(withTimeInterval: TimeInterval, repeats: Bool, block: @escaping (TimerProtocol) -> Void) -> TimerProtocol {
    scheduledTimerCallCount += 1
    if let scheduledTimerHandler {
      return scheduledTimerHandler(withTimeInterval, repeats, block)
    }
    return TimerProtocolMock()
  }

  public private(set) var invalidateCallCount = 0
  public var invalidateHandler: (() -> Void)?
  public func invalidate() {
    invalidateCallCount += 1
    if let invalidateHandler {
      invalidateHandler()
    }
  }
}

public class PersistenceServiceReadMock: PersistenceServiceRead {
  public init() {}

  public private(set) var performCallCount = 0
  public var performHandler: ((Database) throws -> (Model))?
  public func perform(in database: Database) throws -> Model {
    performCallCount += 1
    if let performHandler {
      return try performHandler(database)
    }
    fatalError("performHandler returns can't have a default value thus its handler must be set")
  }

  public typealias Model = Any
}

public class PersistenceServiceMigrationMock: PersistenceServiceMigration {
  public init() {}
  public init(identifier: String = "") {
    self.identifier = identifier
  }

  public private(set) var performCallCount = 0
  public var performHandler: ((Database) throws -> Void)?
  public func perform(in database: Database) throws {
    performCallCount += 1
    if let performHandler {
      try performHandler(database)
    }
  }

  public private(set) var identifierSetCallCount = 0
  public var identifier: String = "" { didSet { identifierSetCallCount += 1 } }
}

public class PersistenceServiceMock: PersistenceService {
  public init() {}
  public init(path: String? = nil) {
    self.path = path
  }

  public private(set) var pathSetCallCount = 0
  public var path: String? = nil { didSet { pathSetCallCount += 1 } }

  public private(set) var loadCallCount = 0
  public var loadHandler: ((String?) throws -> Void)?
  public func load(at path: String?) throws {
    loadCallCount += 1
    if let loadHandler {
      try loadHandler(path)
    }
  }

  public private(set) var performSyncCallCount = 0
  public var performSyncHandler: ((PersistenceServiceWrite) throws -> Void)?
  public func performSync(_ write: PersistenceServiceWrite) throws {
    performSyncCallCount += 1
    if let performSyncHandler {
      try performSyncHandler(write)
    }
  }

  public private(set) var performCallCount = 0
  public var performHandler: ((PersistenceServiceWrite, @escaping (Error?) -> Void) -> Void)?
  public func perform(_ write: PersistenceServiceWrite, completion: @escaping (Error?) -> Void) {
    performCallCount += 1
    if let performHandler {
      performHandler(write, completion)
    }
  }

  public private(set) var performWriteCallCount = 0
  public var performWriteHandler: ((PersistenceServiceWrite) async throws -> Void)?
  public func perform(_ write: PersistenceServiceWrite) async throws {
    performWriteCallCount += 1
    if let performWriteHandler {
      try await performWriteHandler(write)
    }
  }

  public private(set) var performSyncReadCallCount = 0
  public var performSyncReadHandler: ((Any) throws -> (Any))?
  public func performSync<Read>(_ read: Read) throws -> Read.Model where Read: PersistenceServiceRead {
    performSyncReadCallCount += 1
    if let performSyncReadHandler {
      return try performSyncReadHandler(read) as! Read.Model
    }
    fatalError("performSyncReadHandler returns can't have a default value thus its handler must be set")
  }

  public private(set) var performReadCallCount = 0
  public var performReadHandler: ((Any, Any) -> Void)?
  public func perform<Read>(_ read: Read, completion: @escaping (Result<Read.Model, Error>) -> Void) where Read: PersistenceServiceRead {
    performReadCallCount += 1
    if let performReadHandler {
      performReadHandler(read, completion)
    }
  }

  public private(set) var performReadReadCallCount = 0
  public var performReadReadHandler: ((Any) async throws -> (Any))?
  public func perform<Read>(_ read: Read) async throws -> Read.Model where Read: PersistenceServiceRead {
    performReadReadCallCount += 1
    if let performReadReadHandler {
      return try await performReadReadHandler(read) as! Read.Model
    }
    fatalError("performReadReadHandler returns can't have a default value thus its handler must be set")
  }

  public private(set) var observeCallCount = 0
  public var observeHandler: ((Any) -> (Any))?
  public func observe<Read>(_ read: Read) -> AsyncThrowingStream<Read.Model, Error> where Read: PersistenceServiceRead {
    observeCallCount += 1
    if let observeHandler {
      return observeHandler(read) as! AsyncThrowingStream<Read.Model, Error>
    }
    fatalError("observeHandler returns can't have a default value thus its handler must be set")
  }
}

public class NetworkMiddlewareMock: NetworkMiddleware {
  public init() {}

  public private(set) var requestWillBeginCallCount = 0
  public var requestWillBeginHandler: ((URLRequest) -> Void)?
  public func requestWillBegin(_ request: URLRequest) {
    requestWillBeginCallCount += 1
    if let requestWillBeginHandler {
      requestWillBeginHandler(request)
    }
  }

  public private(set) var requestCallCount = 0
  public var requestHandler: ((URLRequest, Data, URLResponse) -> Void)?
  public func request(_ request: URLRequest, didCompleteWith data: Data, response: URLResponse) {
    requestCallCount += 1
    if let requestHandler {
      requestHandler(request, data, response)
    }
  }

  public private(set) var requestDidErrorWithCallCount = 0
  public var requestDidErrorWithHandler: ((URLRequest, Error) -> Void)?
  public func request(_ request: URLRequest, didErrorWith error: Error) {
    requestDidErrorWithCallCount += 1
    if let requestDidErrorWithHandler {
      requestDidErrorWithHandler(request, error)
    }
  }
}

public class NotificationsServiceCenterMock: NotificationsServiceCenter {
  public init() {}
  public init(delegate: UNUserNotificationCenterDelegate? = nil) {
    self.delegate = delegate
  }

  public private(set) var delegateSetCallCount = 0
  public var delegate: UNUserNotificationCenterDelegate? = nil { didSet { delegateSetCallCount += 1 } }

  public private(set) var addCallCount = 0
  public var addHandler: ((UNNotificationRequest, ((Error?) -> Void)?) -> Void)?
  public func add(_ request: UNNotificationRequest, withCompletionHandler completionHandler: ((Error?) -> Void)?) {
    addCallCount += 1
    if let addHandler {
      addHandler(request, completionHandler)
    }
  }

  public private(set) var getNotificationSettingsCallCount = 0
  public var getNotificationSettingsHandler: ((@escaping (UNNotificationSettings) -> Void) -> Void)?
  public func getNotificationSettings(completionHandler: @escaping (UNNotificationSettings) -> Void) {
    getNotificationSettingsCallCount += 1
    if let getNotificationSettingsHandler {
      getNotificationSettingsHandler(completionHandler)
    }
  }

  public private(set) var pendingNotificationRequestsCallCount = 0
  public var pendingNotificationRequestsHandler: (() async -> ([UNNotificationRequest]))?
  public func pendingNotificationRequests() async -> [UNNotificationRequest] {
    pendingNotificationRequestsCallCount += 1
    if let pendingNotificationRequestsHandler {
      return await pendingNotificationRequestsHandler()
    }
    return [UNNotificationRequest]()
  }

  public private(set) var removeAllDeliveredNotificationsCallCount = 0
  public var removeAllDeliveredNotificationsHandler: (() -> Void)?
  public func removeAllDeliveredNotifications() {
    removeAllDeliveredNotificationsCallCount += 1
    if let removeAllDeliveredNotificationsHandler {
      removeAllDeliveredNotificationsHandler()
    }
  }

  public private(set) var removeAllPendingNotificationRequestsCallCount = 0
  public var removeAllPendingNotificationRequestsHandler: (() -> Void)?
  public func removeAllPendingNotificationRequests() {
    removeAllPendingNotificationRequestsCallCount += 1
    if let removeAllPendingNotificationRequestsHandler {
      removeAllPendingNotificationRequestsHandler()
    }
  }

  public private(set) var removeDeliveredNotificationsCallCount = 0
  public var removeDeliveredNotificationsHandler: (([String]) -> Void)?
  public func removeDeliveredNotifications(withIdentifiers identifiers: [String]) {
    removeDeliveredNotificationsCallCount += 1
    if let removeDeliveredNotificationsHandler {
      removeDeliveredNotificationsHandler(identifiers)
    }
  }

  public private(set) var removePendingNotificationRequestsCallCount = 0
  public var removePendingNotificationRequestsHandler: (([String]) -> Void)?
  public func removePendingNotificationRequests(withIdentifiers identifiers: [String]) {
    removePendingNotificationRequestsCallCount += 1
    if let removePendingNotificationRequestsHandler {
      removePendingNotificationRequestsHandler(identifiers)
    }
  }

  public private(set) var requestAuthorizationCallCount = 0
  public var requestAuthorizationHandler: ((UNAuthorizationOptions, @escaping (Bool, Error?) -> Void) -> Void)?
  public func requestAuthorization(options: UNAuthorizationOptions, completionHandler: @escaping (Bool, Error?) -> Void) {
    requestAuthorizationCallCount += 1
    if let requestAuthorizationHandler {
      requestAuthorizationHandler(options, completionHandler)
    }
  }
}
